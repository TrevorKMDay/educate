theme_bw() +
scale_x_continuous(name = "Average teacher salary", labels = dollar) +
ylab("Probability density")
ggsave("figs/wc-density-example-01.png", p1)
ggsave("vignettes/figs/wc-density-example-01.png", p1)
ggsave("vignettes/figs/wc-density-example-01.png", p1, height = 6, width = 6, )
ggsave("vignettes/figs/wc-density-example-01.png", p1, height = 6, width = 8)
p2 = ggplot(data = education, aes(x = salary)) +
stat_watercolor_density(model = "normal") +
stat_density(aes(y = ..density..), geom = "line", size = 0.5) +
theme_bw() +
scale_x_continuous(name = "Average teacher salary", labels = dollar) +
ylab("Probability density")
ggsave("vignettes/figs/wc-density-example-02.png", p2, height = 6, width = 8)
p3= watercolor_density(data = education, x = salary, multicolor = TRUE)
ggsave("vignettes/figs/wc-density-example-03.png", p3, height = 6, width = 8)
p4 = watercolor_density(data = education, x = salary, multicolor = TRUE) +
scale_x_continuous(name = "Average teacher salary", labels = dollar) +
ylab("Probability density")
ggsave("vignettes/figs/wc-density-example-04.png", p4, height = 6, width = 8)
p1 = ggplot(data = education, aes(x = salary, y = sat)) +
stat_watercolor_smooth(method = "lm") +
geom_smooth(method = "lm", se = FALSE, color = "black") +
theme_classic() +
scale_x_continuous(name = "Average teacher salary", labels = dollar) +
ylab("Average SAT score")
ggsave("vignettes/figs/wc-smoother-example-01.png", p1, height = 6, width = 6)
p2 = ggplot(data = education, aes(x = salary, y = sat)) +
stat_watercolor_smooth(k = 1000, alpha = 0.03) +
geom_smooth(se = FALSE, color = "black") +
theme_classic() +
scale_x_continuous(name = "Average teacher salary", labels = dollar) +
ylab("Average SAT score")
ggsave("vignettes/figs/wc-smoother-example-02.png", p2, height = 6, width = 6)
p3 = watercolor_smoother(data = education, x = salary, y = sat, method = "lm")
ggsave("vignettes/figs/wc-smoother-example-03.png", p3, height = 6, width = 6)
p4 = watercolor_smoother_felix(formula = sat~salary, data = education, show.points = TRUE)
ggsave("vignettes/figs/wc-smoother-example-04.png", p4, height = 6, width = 6)
build_site()
p4 = watercolor_smoother_felix(formula = sat~salary, data = education, show.points = TRUE)
ggsave("vignettes/figs/wc-smoother-example-04.png", p4, height = 6, width = 6)
build_site()
library(hexSticker)
font_add_google("Open Sans", "open")
font_add_google("Oswald")
library(showtext)
font_add_google("Open Sans", "open")
font_add_google("Oswald")
p2 = watercolor_density(data = education, x = salary, multicolor = TRUE) +
scale_x_continuous(name = "Average teacher salary", labels = dollar) +
ylab("Probability density")
sticker(p2,
# Package name, color, font family, size
package = "educate", p_color = "#ffffff", p_family = "open", p_size = 8, p_y = 1.4,
s_x = 1.3, s_y = 0.7, s_width = 1.1, s_height = 1,         # Subplot size
h_color = "#002B3Cbb", h_size = 0.8, h_fill = "#002B3C", # Hexagon border
#url = "MAA : ASA : AMATYC", u_color = "#ffffff", u_family = "Oswald",
filename="educate_sticker.png")
sticker(p2,
# Package name, color, font family, size
package = "educate", p_color = "#ffffff", p_family = "open", p_size = 8, p_y = 1.4,
s_x = 1.3, s_y = 0.7, s_width = 1.1, s_height = 1,         # Subplot size
h_color = "#002B3Cbb", h_size = 0.8, h_fill = "#002B3C", # Hexagon border
#url = "https://github.com/zief0002/educate", u_color = "#ffffff", u_family = "Oswald",
filename="~/Desktop/educate_sticker.png")
p2 = watercolor_density(data = education, x = salary, multicolor = TRUE) +
scale_x_continuous(name = "", labels = NULL, breaks = NULL)
p2 = watercolor_density(data = education, x = salary, multicolor = TRUE) +
scale_x_continuous(name = "", labels = NULL, breaks = NA)
p2 = watercolor_density(data = education, x = salary, multicolor = TRUE) +
theme_none()
p2 = watercolor_density(data = education, x = salary, multicolor = TRUE) +
theme_blank()
p2 = watercolor_density(data = education, x = salary, multicolor = TRUE) +
+ theme(
axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.position="none",
panel.background=element_blank(),
panel.border=element_blank(),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
plot.background=element_blank()
)
p2 = watercolor_density(data = education, x = salary, multicolor = TRUE)  +
scale_x_continuous(expand=c(0,0)) +
scale_y_continuous(expand=c(0,0)) +
+ theme(
axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.position="none",
panel.background=element_blank(),
panel.border=element_blank(),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
plot.background=element_blank()
)
p2 = watercolor_density(data = education, x = salary, multicolor = TRUE)  +
theme_void()
p2 = watercolor_density(data = education, x = salary, multicolor = TRUE)  +
ggthemes::theme_void()
lower_bound = min(education$salary, na.rm = TRUE)
upper_bound = max(education$salary, na.rm = TRUE)
densities_within = data.frame(bs = 1:k) %>%
dplyr::group_by(bs) %>%
dplyr::mutate(
data = list(education %>% dplyr::sample_frac(size = 1, replace = TRUE))
) %>%
tidyr::unnest() %>%
dplyr::group_by(bs) %>%
dplyr::do(broom::tidy(density(.$salary, from = lower_bound, to = upper_bound, n = 128, na.rm = TRUE))) %>%
dplyr::ungroup()
library(dplyr)
densities_within = data.frame(bs = 1:k) %>%
dplyr::group_by(bs) %>%
dplyr::mutate(
data = list(education %>% dplyr::sample_frac(size = 1, replace = TRUE))
) %>%
tidyr::unnest() %>%
dplyr::group_by(bs) %>%
dplyr::do(broom::tidy(density(.$salary, from = lower_bound, to = upper_bound, n = 128, na.rm = TRUE))) %>%
dplyr::ungroup()
densities_within = data.frame(bs = 1:1000) %>%
dplyr::group_by(bs) %>%
dplyr::mutate(
data = list(education %>% dplyr::sample_frac(size = 1, replace = TRUE))
) %>%
tidyr::unnest() %>%
dplyr::group_by(bs) %>%
dplyr::do(broom::tidy(density(.$salary, from = lower_bound, to = upper_bound, n = 128, na.rm = TRUE))) %>%
dplyr::ungroup()
# Rename variables
names(densities_within)[2] = "X"
names(densities_within)[3] = "dens"
# Compute limits for conditional densities for better color gradient
M = mean(densities_within$dens)
SD = sd(densities_within$dens)
low_limit = M - 3 * SD
upp_limit = M + 3 * SD
my_dens = data.frame(
X = density(education$salary, from = min(var, na.rm = TRUE), to = max(var, na.rm = TRUE), n = 128, na.rm = TRUE)$x,
emp_dens = density(education$salary, from = min(var, na.rm = TRUE), to = max(var, na.rm = TRUE), n = 128, na.rm = TRUE)$y
)
# Join with empirical density and create color gradient levels
densities_within = densities_within %>%
dplyr::left_join(my_dens, by = "X") %>%
dplyr::filter(dens > low_limit, dens < upp_limit) %>%
dplyr::group_by(X) %>%
dplyr::mutate(
dens.scaled = abs(dens - emp_dens),
dens.scaled2 = dens.scaled / (max(dens.scaled) - min(dens.scaled))
) %>%
dplyr::ungroup()
my_dens = data.frame(
X = density(education$salary, from = min(var, na.rm = TRUE), to = max(var, na.rm = TRUE), n = 128, na.rm = TRUE)$x,
emp_dens = density(education$salary, from = min(var, na.rm = TRUE), to = max(var, na.rm = TRUE), n = 128, na.rm = TRUE)$y
)
my_dens = data.frame(
X = density(education$salary, from = lower_bound, to = upper_bound, n = 128, na.rm = TRUE)$x,
emp_dens = density(education$salary, from = lower_bound, to = upper_bound, n = 128, na.rm = TRUE)$y
)
# Join with empirical density and create color gradient levels
densities_within = densities_within %>%
dplyr::left_join(my_dens, by = "X") %>%
dplyr::filter(dens > low_limit, dens < upp_limit) %>%
dplyr::group_by(X) %>%
dplyr::mutate(
dens.scaled = abs(dens - emp_dens),
dens.scaled2 = dens.scaled / (max(dens.scaled) - min(dens.scaled))
) %>%
dplyr::ungroup()
# Create multicolored watercolor normal density plot
ggplot(data = densities_within, aes(x = X)) +
geom_path(ggplot2::aes(group = bs, y = dens, color = dens.scaled2)) +
scale_color_gradientn("dens.scaled", colors = rev(palette)) +
scale_alpha_continuous(range = c(0.001, 1)) +
stat_density(data = data, ggplot2::aes(x = var), geom = "line", color = emp_dens_color, size = 0.5) +
theme_void()
densities_within
# Create multicolored watercolor normal density plot
ggplot(data = densities_within, aes(x = X)) +
geom_path(ggplot2::aes(group = bs, y = dens, color = dens.scaled2)) +
scale_color_gradientn("dens.scaled", colors = rev(palette)) +
scale_alpha_continuous(range = c(0.001, 1)) +
stat_density(data = education, aes(x = salary), geom = "line", color = emp_dens_color, size = 0.5) +
theme_void()
# Create multicolored watercolor normal density plot
ggplot(data = densities_within, aes(x = X)) +
geom_path(ggplot2::aes(group = bs, y = dens, color = dens.scaled2)) +
scale_color_gradientn("dens.scaled", colors = rev(palette)) +
scale_alpha_continuous(range = c(0.001, 1)) +
stat_density(data = education, aes(x = salary), geom = "line", color = "black", size = 0.5) +
theme_void()
ggplot(data = densities_within, aes(x = X)) +
geom_path(ggplot2::aes(group = bs, y = dens, color = dens.scaled2))
# Create multicolored watercolor normal density plot
ggplot(data = densities_within, aes(x = X)) +
geom_path(ggplot2::aes(group = bs, y = dens, color = dens.scaled2)) +
scale_color_gradientn("dens.scaled", colors = rev(RColorBrewer::brewer.pal(9, "YlGnBu"))) +
scale_alpha_continuous(range = c(0.001, 1)) +
stat_density(data = education, aes(x = salary), geom = "line", color = "black", size = 0.5) +
theme_void()
# Create multicolored watercolor normal density plot
ggplot(data = densities_within, aes(x = X)) +
geom_path(ggplot2::aes(group = bs, y = dens, color = dens.scaled2)) +
scale_color_gradientn("dens.scaled", colors = rev(RColorBrewer::brewer.pal(9, "YlGnBu"))) +
scale_alpha_continuous(range = c(0.001, 1)) +
stat_density(data = education, aes(x = salary), geom = "line", color = "black", size = 0.5) +
theme_void() +
guides(color = FALSE, alpha = FALSE)
# Create multicolored watercolor normal density plot
p2 = ggplot(data = densities_within, aes(x = X)) +
geom_path(ggplot2::aes(group = bs, y = dens, color = dens.scaled2)) +
scale_color_gradientn("dens.scaled", colors = rev(RColorBrewer::brewer.pal(9, "YlGnBu"))) +
scale_alpha_continuous(range = c(0.001, 1)) +
stat_density(data = education, aes(x = salary), geom = "line", color = "black", size = 0.5) +
theme_void() +
guides(color = FALSE, alpha = FALSE)
sticker(p2,
# Package name, color, font family, size
package = "educate", p_color = "#ffffff", p_family = "open", p_size = 8, p_y = 1.4,
s_x = 1.3, s_y = 0.7, s_width = 1.1, s_height = 1,         # Subplot size
h_color = "#002B3Cbb", h_size = 0.8, h_fill = "#002B3C", # Hexagon border
#url = "https://github.com/zief0002/educate", u_color = "#ffffff", u_family = "Oswald",
filename="~/Desktop/educate_sticker.png"
)
sticker(p2,
# Package name, color, font family, size
package = "educate", p_color = "#ffffff", p_family = "open", p_size = 8, p_y = 1.4,
s_x = 1.3, s_y = 0.7, s_width = 1.1, s_height = 1.1,         # Subplot size
h_color = "#002B3Cbb", h_size = 0.8, h_fill = "#002B3C", # Hexagon border
#url = "https://github.com/zief0002/educate", u_color = "#ffffff", u_family = "Oswald",
filename="~/Desktop/educate_sticker.png"
)
sticker(p2,
# Package name, color, font family, size
package = "educate", p_color = "#ffffff", p_family = "open", p_size = 8, p_y = 1.4,
s_x = 0.5, s_y = 0.7, s_width = 0.8, s_height = 0.7,         # Subplot size
h_color = "#002B3Cbb", h_size = 0.8, h_fill = "#002B3C", # Hexagon border
#url = "https://github.com/zief0002/educate", u_color = "#ffffff", u_family = "Oswald",
filename="~/Desktop/educate_sticker.png"
)
?sticker
sticker(p2,
# Package name, color, font family, size
package = "educate", p_color = "#ffffff", p_family = "open", p_size = 8, p_y = 1.4,
s_x = 0.8, s_y = 0.7, s_width = 0.8, s_height = 0.7,         # Subplot size
h_color = "#002B3Cbb", h_size = 0.8, h_fill = "#002B3C", # Hexagon border
#url = "https://github.com/zief0002/educate", u_color = "#ffffff", u_family = "Oswald",
filename="~/Desktop/educate_sticker.png"
)
sticker(p2,
# Package name, color, font family, size
package = "educate", p_color = "#ffffff", p_family = "open", p_size = 8, p_y = 1.4,
s_x = 1.0, s_y = 0.7, s_width = 0.8, s_height = 0.7,         # Subplot size
h_color = "#002B3Cbb", h_size = 0.8, h_fill = "#002B3C", # Hexagon border
#url = "https://github.com/zief0002/educate", u_color = "#ffffff", u_family = "Oswald",
filename="~/Desktop/educate_sticker.png"
)
sticker(p2,
# Package name, color, font family, size
package = "educate", p_color = "#ffffff", p_family = "open", p_size = 8, p_y = 1.4,
s_x = 1.0, s_y = 0.7, s_width = 0.9, s_height = 0.8,         # Subplot size
h_color = "#002B3Cbb", h_size = 0.8, h_fill = "#002B3C", # Hexagon border
#url = "https://github.com/zief0002/educate", u_color = "#ffffff", u_family = "Oswald",
filename="~/Desktop/educate_sticker.png"
)
sticker(p2,
# Package name, color, font family, size
package = "educate", p_color = "#ffffff", p_family = "open", p_size = 8, p_y = 1.4,
s_x = 1.1, s_y = 0.7, s_width = 0.9, s_height = 0.8,         # Subplot size
h_color = "#002B3Cbb", h_size = 0.8, h_fill = "#002B3C", # Hexagon border
#url = "https://github.com/zief0002/educate", u_color = "#ffffff", u_family = "Oswald",
filename="~/Desktop/educate_sticker.png"
)
sticker(p2,
# Package name, color, font family, size
package = "educate", p_color = "#ffffff", p_family = "open", p_size = 8, p_y = 1.4,
s_x = 1.1, s_y = 0.8, s_width = 0.9, s_height = 0.8,         # Subplot size
h_color = "#002B3Cbb", h_size = 0.8, h_fill = "#002B3C", # Hexagon border
#url = "https://github.com/zief0002/educate", u_color = "#ffffff", u_family = "Oswald",
filename="~/Desktop/educate_sticker.png"
)
sticker(p2,
# Package name, color, font family, size
package = "educate", p_color = "#ffffff", p_family = "open", p_size = 8, p_y = 1.4,
s_x = 1.1, s_y = 0.9, s_width = 1.0, s_height = 0.8,         # Subplot size
h_color = "#002B3Cbb", h_size = 0.8, h_fill = "#002B3C", # Hexagon border
url = "https://github.com/zief0002/educate", u_color = "#ffffff", u_family = "Oswald",
filename="~/Desktop/educate_sticker.png"
)
sticker(p2,
# Package name, color, font family, size
package = "educate", p_color = "#ffffff", p_family = "open", p_size = 8, p_y = 1.4,
s_x = 1.1, s_y = 0.9, s_width = 1.2, s_height = 0.8,         # Subplot size
h_color = "#002B3Cbb", h_size = 0.8, h_fill = "#002B3C", # Hexagon border
url = "https://github.com/zief0002/educate", u_color = "#ffffff", u_family = "Oswald",
filename="~/Desktop/educate_sticker.png"
)
sticker(p2,
# Package name, color, font family, size
package = "educate", p_color = "#ffffff", p_family = "open", p_size = 8, p_y = 1.45,
s_x = 1.1, s_y = 0.9, s_width = 1.2, s_height = 0.8,         # Subplot size
h_color = "#002B3Cbb", h_size = 0.8, h_fill = "#002B3C", # Hexagon border
url = "https://github.com/zief0002/educate", u_color = "#ffffff", u_family = "Oswald",
filename="~/Desktop/educate_sticker.png"
)
build_site()
build_favicon()
?build_favicon
build_favicon()
build_site()
build_site()
build_site()
usethis::use_news_md()
usethis::use_news_md()
build_site()
build_site()
build_site()
build_site()
mtcars
ggplot(data = mtcars, aes(x = mpg)) + educate::stat_watercolor_density()
ggplot2::ggplot(data = mtcars, aes(x = mpg)) + educate::stat_watercolor_density()
ggplot2::ggplot(data = mtcars, ggplot2::aes(x = mpg)) + educate::stat_watercolor_density()
data = mtcars
d1 = data.frame(
x = data$x
)
x = mpg
k =10
data.frame(group = 1:k)
data.frame(group = 1:k) %>%
dplyr::group_by(group) %>%
dplyr::mutate(
d = list(rnorm(n, mu_hat, sigma_hat)),
yhat = purrr::map(.x = d, .f = ~helper_func(.x))
) %>%
dplyr::select(-d)
library(dplyr)
data.frame(group = 1:k) %>%
dplyr::group_by(group) %>%
dplyr::mutate(
d = list(rnorm(n, mu_hat, sigma_hat)),
yhat = purrr::map(.x = d, .f = ~helper_func(.x))
) %>%
dplyr::select(-d)
library(educate)
ggplot2::ggplot(data = mtcars, ggplot2::aes(x = mpg)) + educate::stat_watercolor_density()
?anova
?broom::tidy
mtcars
library(educate)
?educate::tidy_anova
lm.1 = lm(mpg ~ 1 + hp + wt, data = mtcars)
tidy_anova(lm.1, model = TRUE)
educate::tidy_anova(lm.1, model = TRUE)
educate::tidy_anova(lm.1, model = TRUE)
library(educate)
?tidy_anova
?tidy
?broom::tidy
av1 = educate::tidy_anova(lm.1, model = TRUE)
class(av1)
library(educate)
library(tidyverse)
family = read_csv(file = "~/Documents/github/epsy-8251/data/substance-family.csv")
# Create all three dummy variables
family = family %>%
mutate(
two_parent = if_else(family_structure == "Two-parent family", 1, 0),
parent_guardian = if_else(family_structure == "One-parent, one guardian", 1, 0),
one_parent = if_else(family_structure == "Single-parent family", 1, 0),
)
# Two-parent households is reference group
lm.1 = lm(substance_use ~ 1 + parent_guardian + one_parent, data = family)
tidy_anova(lm.1)
tidy_anova(lm.1, model = TRUE)
glance(lm.1)
broom::glance(lm.1)
educate::sm_density(mtcars$mpg)
educate::sm_density(mtcars,x = mpg)
library(educate)
d = density(mtcars$mpg)
d
names(d)
install.packages("sm")
sm::sm.density
methods(sm::sm.density)
methods("sm::sm.density")
library(sm)
methods("sm.density")
sm.density(mtcars$mpg)
?sm.density
sm.density.compare
rp.density
sm::rp.density
methods("rp.density")
methods(rp.density)
rp.density1
rp.density2
rp.density3
methods("rp.density1")
UseMethod("rp.density")
UseMethod("rp.density1")
UseMethod("sm.density")
methods(sm.density)
methods(rp.density)
methods(rp.density1)
library(rpanel)
install.packages("rpanel")
rpanel::rp.density1
d2 = sm.density(mtcars$mpg)
names(d2)
d2$upper
d2$h
d2$estimate
d2$eval.points
lines(x = d2$eval.points, y = d2$upper, col = "red")
d2 = sm.density(mtcars$mpg, model = normal)
d2 = sm.density(mtcars$mpg, model = "Normal")
names(d2)
lines(x = d2$eval.points, y = d2$upper, col = "red")
d3 = sm.density(mtcars$mpg, model = "Normal")
names(d3)
lines(x = d3$eval.points, y = d3$upper, col = "red")
sm.density
install.packages(c("rpanel", "tkrplot"))
sm.density.compare
kde = density(mtcars$mpg)
h <- kde$bw
# Estimate the variance
var_kde_hat <- kde$y * Rk / (n * h)
# R(K) for a normal
Rk <- 1 / (2 * sqrt(pi))
# Estimate the variance
var_kde_hat <- kde$y * Rk / (n * h)
kde = density(mtcars$mpg, n = 1024)
# R(K) for a normal
Rk <- 1 / (2 * sqrt(pi))
# Selected bandwidth
h <- kde$bw
# Estimate the variance
var_kde_hat <- kde$y * Rk / (n * h)
kde$y
kde$y * Rk
n = 1024
# Estimate the variance
var_kde_hat <- kde$y * Rk / (n * h)
# CI with estimated variance
alpha <- 0.05
z_alpha <- qnorm(1 - alpha/2)
ci_low_1 <- kde$y - z_alpha * sqrt(var_kde_hat)
ci_up_1 <- kde$y + z_alpha * sqrt(var_kde_hat)
lines(kde$x, kde$y)
lines(kde$x, ci_up_1)
sm.density(mtcars$mpg, model = "Normal")
mu_hat = MASS::fitdistr(na.omit(mtcars$mpg), "normal")$estimate[[1]]
sigma_hat = MASS::fitdistr(na.omit(mtcars$mpg), "normal")$estimate[[2]]
kde = rnorm(n = 1024, mean = mu_hat, sigma = sigma_hat)
kde = rnorm(n = 1024, mean = mu_hat, sd = sigma_hat)
# R(K) for a normal
Rk <- 1 / (2 * sqrt(pi))
# Selected bandwidth
h <- kde$bw
n = 1024
# Estimate the variance
var_kde_hat <- kde$y * Rk / (n * h)
kde = density(rnorm(n = 1024, mean = mu_hat, sd = sigma_hat))
# Selected bandwidth
h <- kde$bw
n = 1024
# Estimate the variance
var_kde_hat <- kde$y * Rk / (n * h)
lines(kde$x, kde$y, col="blue")
kde = density(rnorm(n = 10000, mean = mu_hat, sd = sigma_hat))
n = 10000
# Selected bandwidth
h <- kde$bw
# Estimate the variance
var_kde_hat <- kde$y * Rk / (n * h)
lines(kde$x, kde$y, col="blue")
lines(kde$x, ci_up_1, col = "red")
ci_low_1 <- kde$y - z_alpha * sqrt(var_kde_hat)
ci_up_1 <- kde$y + z_alpha * sqrt(var_kde_hat)
lines(kde$x, ci_up_1, col = "red")
d3 = sm.density(mtcars$mpg, model = "Normal")
dnorm(d3$eval.points, mean = mu_hat, sd = sigma_hat)
lines(d3$eval.points, dnorm(d3$eval.points, mean = mu_hat, sd = sigma_hat), col = "red")
h
lines(d3$eval.points, dnorm(d3$eval.points, mean = mu_hat, sd = sigma_hat)-h, col = "red")
names(d3)
d3$h.weights
d3$weights
y = dnorm(d3$eval.points, mean = mu_hat, sd = sigma_hat)
n = length(d3$eval.points)
h = d3$h
var_kde_hat <- y * Rk / (n * h)
ci_low_1 <- y - z_alpha * sqrt(var_kde_hat)
ci_up_1 <- y + z_alpha * sqrt(var_kde_hat)
lines(d3$eval.points, ci_up_1, col = "red", lty = "dashed")
sigma_hat = sd(mtcars$mpg)
y = dnorm(d3$eval.points, mean = mu_hat, sd = sigma_hat)
lines(d3$eval.points, y, col = "rblue")
lines(d3$eval.points, y, col = "blue")
