#'
#' @importFrom dplyr %>%
#'
#' @export
watercolor_density = function(data, x, k = 1000, model = "none",
se_boot = TRUE, color = "#1D91C0", alpha = 0.03,
multicolor = FALSE, palette = RColorBrewer::brewer.pal(9, "YlGnBu"),
emp_dens_color = "black", emp_dens_size = 0.5,
rug = FALSE, rug_color = "black", ...){
var  = eval(substitute(x), data) # Get variable
var2 = substitute(.$x)           # Get variable for density()
# Tests
if(!is.numeric(var)) return("x is non-numeric") # Check that input is numeric
if(length(var) == 0) return("x has no data")
if(model == "none"){
if(se_boot){
lower_bound = min(var, na.rm = TRUE)
upper_bound = max(var, na.rm = TRUE)
# Compute densities of bootstrap samples
message("Computing boostrapped smoothers ...")
flush.console()
densities_within = data.frame(bs = 1:k) %>%
dplyr::group_by(bs) %>%
dplyr::mutate(
data = list(data %>% dplyr::sample_frac(size = 1, replace = TRUE))
) %>%
tidyr::unnest() %>%
dplyr::group_by(bs) %>%
dplyr::do(broom::tidy(density(eval(var2), from = lower_bound, to = upper_bound, n = 128, na.rm = TRUE))) %>%
dplyr::ungroup()
# Rename variables
names(densities_within)[2] = "X"
names(densities_within)[3] = "dens"
# Compute limits for conditional densities for better color gradient
M = mean(densities_within$dens)
SD = sd(densities_within$dens)
low_limit = M - 3 * SD
upp_limit = M + 3 * SD
if(multicolor){
# Get empirical densities
my_dens = data.frame(
X = density(eval(var), from = min(var, na.rm = TRUE), to = max(var, na.rm = TRUE), n = 128, na.rm = TRUE)$x,
emp_dens = density(eval(var), from = min(var, na.rm = TRUE), to = max(var, na.rm = TRUE), n = 128, na.rm = TRUE)$y
)
# Join with empirical density and create color gradient levels
densities_within = densities_within %>%
dplyr::left_join(my_dens, by = "X") %>%
dplyr::filter(dens > low_limit, dens < upp_limit) %>%
dplyr::group_by(X) %>%
dplyr::mutate(
dens.scaled = abs(dens - emp_dens),
dens.scaled2 = dens.scaled / (max(dens.scaled) - min(dens.scaled))
) %>%
dplyr::ungroup()
# Create multicolored watercolor density plot
p = ggplot2::ggplot(data = densities_within, ggplot2::aes(x = X)) +
ggplot2::geom_line(ggplot2::aes(group = bs, y = dens, color = dens.scaled2)) +
ggplot2::scale_color_gradientn("dens.scaled", colors = rev(palette)) +
ggplot2::scale_alpha_continuous(range = c(0.001, 1)) +
ggplot2::stat_density(data = data, ggplot2::aes(x = var), geom = "line", color = emp_dens_color, size = 0.5) +
ggplot2::theme_classic() +
ggplot2::guides(color = FALSE, alpha = FALSE)
} else{
# Filter out extremes for better plotting
densities_within = densities_within %>%
dplyr::filter(dens > low_limit, dens < upp_limit)
# Create monocolored watercolor density plot
p = ggplot2::ggplot(data = densities_within, ggplot2::aes(x = X)) +
ggplot2::geom_path(ggplot2::aes(group = bs, y = dens), color = color, alpha = alpha) +
ggplot2::stat_density(data = data, ggplot2::aes(x = var), geom = "line", color = emp_dens_color, size = emp_dens_size) +
ggplot2::xlab(deparse(substitute(x))) +
ggplot2::ylab("Probability density") +
ggplot2::theme_classic()
}
} else{
# Create density plot with no enevelope
p = ggplot2::ggplot(data = data, ggplot2::aes(x = var)) +
ggplot2::stat_density(geom = "line", color = emp_dens_color, size = emp_dens_size) +
ggplot2::xlab(deparse(substitute(x))) +
ggplot2::ylab("Probability density") +
ggplot2::theme_classic()
}
}
# Code for generating bootstrap paths from a normal model
if(model == "normal") {
# Get parameter estimates
mu_hat = MASS::fitdistr(na.omit(var), "normal")$estimate[[1]]
sigma_hat = MASS::fitdistr(na.omit(var), "normal")$estimate[[2]]
n = length(var)
lower_bound = mu_hat - 4 * sigma_hat
upper_bound = mu_hat + 4 * sigma_hat
# Compute densities of bootstrap samples
message("Computing boostrapped smoothers ...")
flush.console()
densities_within = data.frame(bs = 1:k) %>%
dplyr::group_by(bs) %>%
dplyr::mutate(
data = list(rnorm(n, mu_hat, sigma_hat))
) %>%
tidyr::unnest() %>%
dplyr::group_by(bs) %>%
dplyr::do(broom::tidy(density(.$data, from = lower_bound, to = upper_bound, n = 128, na.rm = TRUE))) %>%
dplyr::ungroup()
names(densities_within)[2] = "X"
names(densities_within)[3] = "dens"
if(multicolor){
densities_within = densities_within %>%
dplyr::group_by(X) %>%
dplyr::mutate(
norm_dens = dnorm(X, mean = mu_hat, sd = sigma_hat),
dens.scaled = abs(dens - norm_dens),
dens.scaled2 = dens.scaled / (max(dens.scaled) - min(dens.scaled))
) %>%
dplyr::ungroup()
# Create multicolored watercolor normal density plot
p = ggplot2::ggplot(data = densities_within, ggplot2::aes(x = X)) +
ggplot2::geom_path(ggplot2::aes(group = bs, y = dens, color = dens.scaled2)) +
ggplot2::scale_color_gradientn("dens.scaled", colors = rev(palette)) +
ggplot2::scale_alpha_continuous(range = c(0.001, 1)) +
ggplot2::stat_density(data = data, ggplot2::aes(x = var), geom = "line", color = emp_dens_color, size = 0.5) +
ggplot2::theme_classic() +
ggplot2::guides(color = FALSE, alpha = FALSE)
} else{
# Create monocolored watercolor normal density plot
p = ggplot2::ggplot(data = densities_within, ggplot2::aes(x = X)) +
geom_path(aes(group = bs, y = dens), color = color, alpha = alpha) +
ggplot2::stat_density(data = data, ggplot2::aes(x = var), geom = "line", color = emp_dens_color, size = emp_dens_size) +
ggplot2::xlab(deparse(substitute(x))) +
ggplot2::ylab("Probability density") +
ggplot2::theme_classic()
}
}
message("Build ggplot figure ...")
flush.console()
if(rug){
p = p + ggplot2::geom_point(data = data, ggplot2::aes(x = var), y = 0, shape = "|", size = 2, color = rug_color)
}
print(p)
}
# sm_density(keith, homework) + theme_bw() + xlab("Time spent on homework")
# sm_density(city, gender)
# sm_density(city, income, boot_envelope = FALSE)
# sm_density(city, seniority, color = "skyblue") + theme_bw()
#
# sm_density(keith, homework, model = "normal") + theme_bw()
# sm_density(city, income, model = "normal", color = "skyblue", rug_color = "red")
##########################################
watercolor_density(data = education, x = salary, multicolor = TRUE)
devtools::install_github("r-lib/pkgdown")
pkgdown::build_site()
library(pkgdown)
sink("_pkgdown.yml")
template_navbar()
template_reference()
sink()
build_site()
build_site()
build_site()
build_site()
template_articles()
build_site()
build_site()
build_site()
build_site()
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(scales)
library(educate)
p1 = ggplot(data = education, aes(x = salary)) +
stat_watercolor_density() +
stat_density(aes(y = ..density..), geom = "line", size = 0.5) +
theme_bw() +
scale_x_continuous(name = "Average teacher salary", labels = dollar) +
ylab("Probability density")
ggsave("figs/wc-density-example-01.png")
p1 = ggplot(data = education, aes(x = salary)) +
stat_watercolor_density() +
stat_density(aes(y = ..density..), geom = "line", size = 0.5) +
theme_bw() +
scale_x_continuous(name = "Average teacher salary", labels = dollar) +
ylab("Probability density", p1)
p1 = ggplot(data = education, aes(x = salary)) +
stat_watercolor_density() +
stat_density(aes(y = ..density..), geom = "line", size = 0.5) +
theme_bw() +
scale_x_continuous(name = "Average teacher salary", labels = dollar) +
ylab("Probability density")
ggsave("figs/wc-density-example-01.png", p1)
ggsave("vignettes/figs/wc-density-example-01.png", p1)
ggsave("vignettes/figs/wc-density-example-01.png", p1, height = 6, width = 6, )
ggsave("vignettes/figs/wc-density-example-01.png", p1, height = 6, width = 8)
p2 = ggplot(data = education, aes(x = salary)) +
stat_watercolor_density(model = "normal") +
stat_density(aes(y = ..density..), geom = "line", size = 0.5) +
theme_bw() +
scale_x_continuous(name = "Average teacher salary", labels = dollar) +
ylab("Probability density")
ggsave("vignettes/figs/wc-density-example-02.png", p2, height = 6, width = 8)
p3= watercolor_density(data = education, x = salary, multicolor = TRUE)
ggsave("vignettes/figs/wc-density-example-03.png", p3, height = 6, width = 8)
p4 = watercolor_density(data = education, x = salary, multicolor = TRUE) +
scale_x_continuous(name = "Average teacher salary", labels = dollar) +
ylab("Probability density")
ggsave("vignettes/figs/wc-density-example-04.png", p4, height = 6, width = 8)
p1 = ggplot(data = education, aes(x = salary, y = sat)) +
stat_watercolor_smooth(method = "lm") +
geom_smooth(method = "lm", se = FALSE, color = "black") +
theme_classic() +
scale_x_continuous(name = "Average teacher salary", labels = dollar) +
ylab("Average SAT score")
ggsave("vignettes/figs/wc-smoother-example-01.png", p1, height = 6, width = 6)
p2 = ggplot(data = education, aes(x = salary, y = sat)) +
stat_watercolor_smooth(k = 1000, alpha = 0.03) +
geom_smooth(se = FALSE, color = "black") +
theme_classic() +
scale_x_continuous(name = "Average teacher salary", labels = dollar) +
ylab("Average SAT score")
ggsave("vignettes/figs/wc-smoother-example-02.png", p2, height = 6, width = 6)
p3 = watercolor_smoother(data = education, x = salary, y = sat, method = "lm")
ggsave("vignettes/figs/wc-smoother-example-03.png", p3, height = 6, width = 6)
p4 = watercolor_smoother_felix(formula = sat~salary, data = education, show.points = TRUE)
ggsave("vignettes/figs/wc-smoother-example-04.png", p4, height = 6, width = 6)
build_site()
p4 = watercolor_smoother_felix(formula = sat~salary, data = education, show.points = TRUE)
ggsave("vignettes/figs/wc-smoother-example-04.png", p4, height = 6, width = 6)
build_site()
library(hexSticker)
font_add_google("Open Sans", "open")
font_add_google("Oswald")
library(showtext)
font_add_google("Open Sans", "open")
font_add_google("Oswald")
p2 = watercolor_density(data = education, x = salary, multicolor = TRUE) +
scale_x_continuous(name = "Average teacher salary", labels = dollar) +
ylab("Probability density")
sticker(p2,
# Package name, color, font family, size
package = "educate", p_color = "#ffffff", p_family = "open", p_size = 8, p_y = 1.4,
s_x = 1.3, s_y = 0.7, s_width = 1.1, s_height = 1,         # Subplot size
h_color = "#002B3Cbb", h_size = 0.8, h_fill = "#002B3C", # Hexagon border
#url = "MAA : ASA : AMATYC", u_color = "#ffffff", u_family = "Oswald",
filename="educate_sticker.png")
sticker(p2,
# Package name, color, font family, size
package = "educate", p_color = "#ffffff", p_family = "open", p_size = 8, p_y = 1.4,
s_x = 1.3, s_y = 0.7, s_width = 1.1, s_height = 1,         # Subplot size
h_color = "#002B3Cbb", h_size = 0.8, h_fill = "#002B3C", # Hexagon border
#url = "https://github.com/zief0002/educate", u_color = "#ffffff", u_family = "Oswald",
filename="~/Desktop/educate_sticker.png")
p2 = watercolor_density(data = education, x = salary, multicolor = TRUE) +
scale_x_continuous(name = "", labels = NULL, breaks = NULL)
p2 = watercolor_density(data = education, x = salary, multicolor = TRUE) +
scale_x_continuous(name = "", labels = NULL, breaks = NA)
p2 = watercolor_density(data = education, x = salary, multicolor = TRUE) +
theme_none()
p2 = watercolor_density(data = education, x = salary, multicolor = TRUE) +
theme_blank()
p2 = watercolor_density(data = education, x = salary, multicolor = TRUE) +
+ theme(
axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.position="none",
panel.background=element_blank(),
panel.border=element_blank(),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
plot.background=element_blank()
)
p2 = watercolor_density(data = education, x = salary, multicolor = TRUE)  +
scale_x_continuous(expand=c(0,0)) +
scale_y_continuous(expand=c(0,0)) +
+ theme(
axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.position="none",
panel.background=element_blank(),
panel.border=element_blank(),
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
plot.background=element_blank()
)
p2 = watercolor_density(data = education, x = salary, multicolor = TRUE)  +
theme_void()
p2 = watercolor_density(data = education, x = salary, multicolor = TRUE)  +
ggthemes::theme_void()
lower_bound = min(education$salary, na.rm = TRUE)
upper_bound = max(education$salary, na.rm = TRUE)
densities_within = data.frame(bs = 1:k) %>%
dplyr::group_by(bs) %>%
dplyr::mutate(
data = list(education %>% dplyr::sample_frac(size = 1, replace = TRUE))
) %>%
tidyr::unnest() %>%
dplyr::group_by(bs) %>%
dplyr::do(broom::tidy(density(.$salary, from = lower_bound, to = upper_bound, n = 128, na.rm = TRUE))) %>%
dplyr::ungroup()
library(dplyr)
densities_within = data.frame(bs = 1:k) %>%
dplyr::group_by(bs) %>%
dplyr::mutate(
data = list(education %>% dplyr::sample_frac(size = 1, replace = TRUE))
) %>%
tidyr::unnest() %>%
dplyr::group_by(bs) %>%
dplyr::do(broom::tidy(density(.$salary, from = lower_bound, to = upper_bound, n = 128, na.rm = TRUE))) %>%
dplyr::ungroup()
densities_within = data.frame(bs = 1:1000) %>%
dplyr::group_by(bs) %>%
dplyr::mutate(
data = list(education %>% dplyr::sample_frac(size = 1, replace = TRUE))
) %>%
tidyr::unnest() %>%
dplyr::group_by(bs) %>%
dplyr::do(broom::tidy(density(.$salary, from = lower_bound, to = upper_bound, n = 128, na.rm = TRUE))) %>%
dplyr::ungroup()
# Rename variables
names(densities_within)[2] = "X"
names(densities_within)[3] = "dens"
# Compute limits for conditional densities for better color gradient
M = mean(densities_within$dens)
SD = sd(densities_within$dens)
low_limit = M - 3 * SD
upp_limit = M + 3 * SD
my_dens = data.frame(
X = density(education$salary, from = min(var, na.rm = TRUE), to = max(var, na.rm = TRUE), n = 128, na.rm = TRUE)$x,
emp_dens = density(education$salary, from = min(var, na.rm = TRUE), to = max(var, na.rm = TRUE), n = 128, na.rm = TRUE)$y
)
# Join with empirical density and create color gradient levels
densities_within = densities_within %>%
dplyr::left_join(my_dens, by = "X") %>%
dplyr::filter(dens > low_limit, dens < upp_limit) %>%
dplyr::group_by(X) %>%
dplyr::mutate(
dens.scaled = abs(dens - emp_dens),
dens.scaled2 = dens.scaled / (max(dens.scaled) - min(dens.scaled))
) %>%
dplyr::ungroup()
my_dens = data.frame(
X = density(education$salary, from = min(var, na.rm = TRUE), to = max(var, na.rm = TRUE), n = 128, na.rm = TRUE)$x,
emp_dens = density(education$salary, from = min(var, na.rm = TRUE), to = max(var, na.rm = TRUE), n = 128, na.rm = TRUE)$y
)
my_dens = data.frame(
X = density(education$salary, from = lower_bound, to = upper_bound, n = 128, na.rm = TRUE)$x,
emp_dens = density(education$salary, from = lower_bound, to = upper_bound, n = 128, na.rm = TRUE)$y
)
# Join with empirical density and create color gradient levels
densities_within = densities_within %>%
dplyr::left_join(my_dens, by = "X") %>%
dplyr::filter(dens > low_limit, dens < upp_limit) %>%
dplyr::group_by(X) %>%
dplyr::mutate(
dens.scaled = abs(dens - emp_dens),
dens.scaled2 = dens.scaled / (max(dens.scaled) - min(dens.scaled))
) %>%
dplyr::ungroup()
# Create multicolored watercolor normal density plot
ggplot(data = densities_within, aes(x = X)) +
geom_path(ggplot2::aes(group = bs, y = dens, color = dens.scaled2)) +
scale_color_gradientn("dens.scaled", colors = rev(palette)) +
scale_alpha_continuous(range = c(0.001, 1)) +
stat_density(data = data, ggplot2::aes(x = var), geom = "line", color = emp_dens_color, size = 0.5) +
theme_void()
densities_within
# Create multicolored watercolor normal density plot
ggplot(data = densities_within, aes(x = X)) +
geom_path(ggplot2::aes(group = bs, y = dens, color = dens.scaled2)) +
scale_color_gradientn("dens.scaled", colors = rev(palette)) +
scale_alpha_continuous(range = c(0.001, 1)) +
stat_density(data = education, aes(x = salary), geom = "line", color = emp_dens_color, size = 0.5) +
theme_void()
# Create multicolored watercolor normal density plot
ggplot(data = densities_within, aes(x = X)) +
geom_path(ggplot2::aes(group = bs, y = dens, color = dens.scaled2)) +
scale_color_gradientn("dens.scaled", colors = rev(palette)) +
scale_alpha_continuous(range = c(0.001, 1)) +
stat_density(data = education, aes(x = salary), geom = "line", color = "black", size = 0.5) +
theme_void()
ggplot(data = densities_within, aes(x = X)) +
geom_path(ggplot2::aes(group = bs, y = dens, color = dens.scaled2))
# Create multicolored watercolor normal density plot
ggplot(data = densities_within, aes(x = X)) +
geom_path(ggplot2::aes(group = bs, y = dens, color = dens.scaled2)) +
scale_color_gradientn("dens.scaled", colors = rev(RColorBrewer::brewer.pal(9, "YlGnBu"))) +
scale_alpha_continuous(range = c(0.001, 1)) +
stat_density(data = education, aes(x = salary), geom = "line", color = "black", size = 0.5) +
theme_void()
# Create multicolored watercolor normal density plot
ggplot(data = densities_within, aes(x = X)) +
geom_path(ggplot2::aes(group = bs, y = dens, color = dens.scaled2)) +
scale_color_gradientn("dens.scaled", colors = rev(RColorBrewer::brewer.pal(9, "YlGnBu"))) +
scale_alpha_continuous(range = c(0.001, 1)) +
stat_density(data = education, aes(x = salary), geom = "line", color = "black", size = 0.5) +
theme_void() +
guides(color = FALSE, alpha = FALSE)
# Create multicolored watercolor normal density plot
p2 = ggplot(data = densities_within, aes(x = X)) +
geom_path(ggplot2::aes(group = bs, y = dens, color = dens.scaled2)) +
scale_color_gradientn("dens.scaled", colors = rev(RColorBrewer::brewer.pal(9, "YlGnBu"))) +
scale_alpha_continuous(range = c(0.001, 1)) +
stat_density(data = education, aes(x = salary), geom = "line", color = "black", size = 0.5) +
theme_void() +
guides(color = FALSE, alpha = FALSE)
sticker(p2,
# Package name, color, font family, size
package = "educate", p_color = "#ffffff", p_family = "open", p_size = 8, p_y = 1.4,
s_x = 1.3, s_y = 0.7, s_width = 1.1, s_height = 1,         # Subplot size
h_color = "#002B3Cbb", h_size = 0.8, h_fill = "#002B3C", # Hexagon border
#url = "https://github.com/zief0002/educate", u_color = "#ffffff", u_family = "Oswald",
filename="~/Desktop/educate_sticker.png"
)
sticker(p2,
# Package name, color, font family, size
package = "educate", p_color = "#ffffff", p_family = "open", p_size = 8, p_y = 1.4,
s_x = 1.3, s_y = 0.7, s_width = 1.1, s_height = 1.1,         # Subplot size
h_color = "#002B3Cbb", h_size = 0.8, h_fill = "#002B3C", # Hexagon border
#url = "https://github.com/zief0002/educate", u_color = "#ffffff", u_family = "Oswald",
filename="~/Desktop/educate_sticker.png"
)
sticker(p2,
# Package name, color, font family, size
package = "educate", p_color = "#ffffff", p_family = "open", p_size = 8, p_y = 1.4,
s_x = 0.5, s_y = 0.7, s_width = 0.8, s_height = 0.7,         # Subplot size
h_color = "#002B3Cbb", h_size = 0.8, h_fill = "#002B3C", # Hexagon border
#url = "https://github.com/zief0002/educate", u_color = "#ffffff", u_family = "Oswald",
filename="~/Desktop/educate_sticker.png"
)
?sticker
sticker(p2,
# Package name, color, font family, size
package = "educate", p_color = "#ffffff", p_family = "open", p_size = 8, p_y = 1.4,
s_x = 0.8, s_y = 0.7, s_width = 0.8, s_height = 0.7,         # Subplot size
h_color = "#002B3Cbb", h_size = 0.8, h_fill = "#002B3C", # Hexagon border
#url = "https://github.com/zief0002/educate", u_color = "#ffffff", u_family = "Oswald",
filename="~/Desktop/educate_sticker.png"
)
sticker(p2,
# Package name, color, font family, size
package = "educate", p_color = "#ffffff", p_family = "open", p_size = 8, p_y = 1.4,
s_x = 1.0, s_y = 0.7, s_width = 0.8, s_height = 0.7,         # Subplot size
h_color = "#002B3Cbb", h_size = 0.8, h_fill = "#002B3C", # Hexagon border
#url = "https://github.com/zief0002/educate", u_color = "#ffffff", u_family = "Oswald",
filename="~/Desktop/educate_sticker.png"
)
sticker(p2,
# Package name, color, font family, size
package = "educate", p_color = "#ffffff", p_family = "open", p_size = 8, p_y = 1.4,
s_x = 1.0, s_y = 0.7, s_width = 0.9, s_height = 0.8,         # Subplot size
h_color = "#002B3Cbb", h_size = 0.8, h_fill = "#002B3C", # Hexagon border
#url = "https://github.com/zief0002/educate", u_color = "#ffffff", u_family = "Oswald",
filename="~/Desktop/educate_sticker.png"
)
sticker(p2,
# Package name, color, font family, size
package = "educate", p_color = "#ffffff", p_family = "open", p_size = 8, p_y = 1.4,
s_x = 1.1, s_y = 0.7, s_width = 0.9, s_height = 0.8,         # Subplot size
h_color = "#002B3Cbb", h_size = 0.8, h_fill = "#002B3C", # Hexagon border
#url = "https://github.com/zief0002/educate", u_color = "#ffffff", u_family = "Oswald",
filename="~/Desktop/educate_sticker.png"
)
sticker(p2,
# Package name, color, font family, size
package = "educate", p_color = "#ffffff", p_family = "open", p_size = 8, p_y = 1.4,
s_x = 1.1, s_y = 0.8, s_width = 0.9, s_height = 0.8,         # Subplot size
h_color = "#002B3Cbb", h_size = 0.8, h_fill = "#002B3C", # Hexagon border
#url = "https://github.com/zief0002/educate", u_color = "#ffffff", u_family = "Oswald",
filename="~/Desktop/educate_sticker.png"
)
sticker(p2,
# Package name, color, font family, size
package = "educate", p_color = "#ffffff", p_family = "open", p_size = 8, p_y = 1.4,
s_x = 1.1, s_y = 0.9, s_width = 1.0, s_height = 0.8,         # Subplot size
h_color = "#002B3Cbb", h_size = 0.8, h_fill = "#002B3C", # Hexagon border
url = "https://github.com/zief0002/educate", u_color = "#ffffff", u_family = "Oswald",
filename="~/Desktop/educate_sticker.png"
)
sticker(p2,
# Package name, color, font family, size
package = "educate", p_color = "#ffffff", p_family = "open", p_size = 8, p_y = 1.4,
s_x = 1.1, s_y = 0.9, s_width = 1.2, s_height = 0.8,         # Subplot size
h_color = "#002B3Cbb", h_size = 0.8, h_fill = "#002B3C", # Hexagon border
url = "https://github.com/zief0002/educate", u_color = "#ffffff", u_family = "Oswald",
filename="~/Desktop/educate_sticker.png"
)
sticker(p2,
# Package name, color, font family, size
package = "educate", p_color = "#ffffff", p_family = "open", p_size = 8, p_y = 1.45,
s_x = 1.1, s_y = 0.9, s_width = 1.2, s_height = 0.8,         # Subplot size
h_color = "#002B3Cbb", h_size = 0.8, h_fill = "#002B3C", # Hexagon border
url = "https://github.com/zief0002/educate", u_color = "#ffffff", u_family = "Oswald",
filename="~/Desktop/educate_sticker.png"
)
build_site()
build_favicon()
?build_favicon
build_favicon()
build_site()
build_site()
build_site()
usethis::use_news_md()
usethis::use_news_md()
build_site()
build_site()
build_site()
build_site()
