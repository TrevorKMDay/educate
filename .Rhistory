install.packages("roxygen2")
devtools::create("educate")
devtools::document()
library(educate)
keith = read_csv(file = "~/Documents/github/epsy-8251/data/keith-gpa.csv")
keith = readr::read_csv(file = "~/Documents/github/epsy-8251/data/keith-gpa.csv")
lm.1 = lm(gpa ~ 1 + homework, data = keith)
lm.1
educate::coef_plot(lm.1, intercept = TRUE)
devtools::document()
devtools::document()
devtools::document()
devtools::load_all()
educate::coef_plot(lm.1)
devtools::document()
devtools::load_all()
educate::coef_plot(lm.1)
devtools::document()
devtools::load_all()
educate::coef_plot(lm.1)
devtools::document()
devtools::load_all()
educate::coef_plot(lm.1)
devtools::document()
devtools::load_all()
educate::coef_plot(lm.1)
educate::coef_plot(lm.1, intercept = FALSE)
devtools::document()
devtools::load_all()
educate::coef_plot(lm.1)
devtools::document()
devtools::load_all()
educate::coef_plot(lm.1)
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
educate::coef_plot(lm.1)
devtools::document()
devtools::load_all()
educate::coef_plot(lm.1)
devtools::document()
devtools::load_all()
educate::coef_plot(lm.1)
intercept = 'FALSE'
intercept
intercept = FALSE
isTRUE(intercept)
devtools::document()
devtools::load_all()
educate::coef_plot(lm.1)
devtools::document()
devtools::load_all()
educate::coef_plot(lm.1)
x = lm.1
coe = summary(x)$coefficients[ , 1] # extract coefficients
cse = summary(x)$coefficients[ , 2] # standard errors
k = length(coe)                     # Number of coefficients
intercept = FALSE
if(isTRUE(intercept) == 1){
start = 1
} else {
start = 2
}
start
intercept = 'FALSE'
if(isTRUE(intercept) == 1){
start = 1
} else {
start = 2
}
start
devtools::document()
devtools::load_all()
educate::coef_plot(lm.1)
educate::coef_plot(lm.1, intercpt = TRUE)
educate::coef_plot(lm.1, intercept = TRUE)
devtools::document()
devtools::load_all()
educate::coef_plot(lm.1)
educate::coef_plot(lm.1, intercept = TRUE)
educate::coef_plot(lm.1)
intercept = FALSE
coe = summary(x)$coefficients[ , 1] # extract coefficients
cse = summary(x)$coefficients[ , 2] # standard errors
k = length(coe)                     # Number of coefficients
start = 2
if(isTRUE(intercept)) start = 1
start
list_length = k - start + 1
# Create empty list to store random results
my_list = vector("list", list_length)
my_list
# Draw and store random coefficients
for(i in start:k) {
my_list[[i]] <- data.frame(
estimate = rnorm(mean = coe[i], sd = cse[i], n = 1000),
term =  names(coef(x))[i]
)
my_list[[i]] = dplyr::mutate(my_list[[i]],
dens_color = dplyr::case_when(
estimate >= coe[i] - 0.25 * cse[i] & estimate <= coe[i] + 0.25 * cse[i] ~ "#2C7FB8",
estimate  < coe[i] + 1.00 * cse[i] & estimate  > coe[i] + 0.25 * cse[i] ~ "#41B6C4",
estimate  > coe[i] - 1.00 * cse[i] & estimate  < coe[i] - 0.25 * cse[i] ~ "#41B6C4",
estimate  < coe[i] + 2.00 * cse[i] & estimate  > coe[i] + 1.00 * cse[i] ~ "#A1DAB4",
estimate  > coe[i] - 2.00 * cse[i] & estimate  < coe[i] - 1.00 * cse[i] ~ "#A1DAB4",
TRUE ~ "#FFFFCC"
)
)
}
my_list
my_list[[i]] = dplyr::mutate(my_list[[i]],
dens_color = dplyr::case_when(
estimate >= coe[i] - 0.25 * cse[i] & estimate <= coe[i] + 0.25 * cse[i] ~ "#2C7FB8",
estimate  < coe[i] + 1.00 * cse[i] & estimate  > coe[i] + 0.25 * cse[i] ~ "#41B6C4",
estimate  > coe[i] - 1.00 * cse[i] & estimate  < coe[i] - 0.25 * cse[i] ~ "#41B6C4",
estimate  < coe[i] + 2.00 * cse[i] & estimate  > coe[i] + 1.00 * cse[i] ~ "#A1DAB4",
estimate  > coe[i] - 2.00 * cse[i] & estimate  < coe[i] - 1.00 * cse[i] ~ "#A1DAB4",
TRUE ~ "#FFFFCC"
)
)
# Store results in dataframe
df = do.call("rbind", my_list)
do.call
df
# Get empirical estimates for coefficients
emp_est = data.frame(estimate = coe, term = names(coef(x)))
# Create plot
p = ggplot2::ggplot(data = df, ggplot2::aes(x = estimate, y = term, color = I(dens_color), fill = I(dens_color))) +
ggplot2::geom_point(alpha = 0.1, shape = 15) +
ggplot2::geom_point(data = emp_est, shape = 21, color = "#253494", fill = "#253494") +
ggplot2::guides(color = FALSE) +
ggplot2::theme_bw() +
ggplot2::theme(
panel.grid.major.x = ggplot2::element_blank(),
panel.grid.minor.x = ggplot2::element_blank()
) +
ggplot2::scale_y_discrete(
name = "Coefficients",
labels = labels) +
ggplot2::xlab("Estimate")
p
names(coef(x))
names(coef(x))[start:k]
# Get empirical estimates for coefficients
emp_est = data.frame(estimate = coe, term = names(coef(x))[start:k])
# Create plot
p = ggplot2::ggplot(data = df, ggplot2::aes(x = estimate, y = term, color = I(dens_color), fill = I(dens_color))) +
ggplot2::geom_point(alpha = 0.1, shape = 15) +
ggplot2::geom_point(data = emp_est, shape = 21, color = "#253494", fill = "#253494") +
ggplot2::guides(color = FALSE) +
ggplot2::theme_bw() +
ggplot2::theme(
panel.grid.major.x = ggplot2::element_blank(),
panel.grid.minor.x = ggplot2::element_blank()
) +
ggplot2::scale_y_discrete(
name = "Coefficients",
labels = labels) +
ggplot2::xlab("Estimate")
p
emp_est
# Get empirical estimates for coefficients
emp_est = data.frame(estimate = coe[start:k], term = names(coef(x))[start:k])
emp_est
# Create plot
p = ggplot2::ggplot(data = df, ggplot2::aes(x = estimate, y = term, color = I(dens_color), fill = I(dens_color))) +
ggplot2::geom_point(alpha = 0.1, shape = 15) +
ggplot2::geom_point(data = emp_est, shape = 21, color = "#253494", fill = "#253494") +
ggplot2::guides(color = FALSE) +
ggplot2::theme_bw() +
ggplot2::theme(
panel.grid.major.x = ggplot2::element_blank(),
panel.grid.minor.x = ggplot2::element_blank()
) +
ggplot2::scale_y_discrete(
name = "Coefficients",
labels = labels) +
ggplot2::xlab("Estimate")
p
# Create plot
p = ggplot2::ggplot(data = df, ggplot2::aes(x = estimate, y = term, color = I(dens_color), fill = I(dens_color))) +
ggplot2::geom_point(alpha = 0.1, shape = 15) +
ggplot2::geom_point(data = emp_est, shape = 21, color = "#253494", fill = "#253494", size = 1.5) +
ggplot2::guides(color = FALSE) +
ggplot2::theme_bw() +
ggplot2::theme(
panel.grid.major.x = ggplot2::element_blank(),
panel.grid.minor.x = ggplot2::element_blank()
) +
ggplot2::scale_y_discrete(
name = "Coefficients",
labels = labels) +
ggplot2::xlab("Estimate")
return(p)
p
# Create plot
p = ggplot2::ggplot(data = df, ggplot2::aes(x = estimate, y = term, color = I(dens_color), fill = I(dens_color))) +
ggplot2::geom_point(alpha = 0.1, shape = 15) +
ggplot2::geom_point(data = emp_est, shape = 21, color = "#253494", fill = "#253494", size = 3) +
ggplot2::guides(color = FALSE) +
ggplot2::theme_bw() +
ggplot2::theme(
panel.grid.major.x = ggplot2::element_blank(),
panel.grid.minor.x = ggplot2::element_blank()
) +
ggplot2::scale_y_discrete(
name = "Coefficients",
labels = labels) +
ggplot2::xlab("Estimate")
p
# Create plot
p = ggplot2::ggplot(data = df, ggplot2::aes(x = estimate, y = term, color = I(dens_color), fill = I(dens_color))) +
ggplot2::geom_point(alpha = 0.1, shape = 15) +
ggplot2::geom_point(data = emp_est, shape = 21, color = "#253494", fill = "#253494", size = 2) +
ggplot2::guides(color = FALSE) +
ggplot2::theme_bw() +
ggplot2::theme(
panel.grid.major.x = ggplot2::element_blank(),
panel.grid.minor.x = ggplot2::element_blank()
) +
ggplot2::scale_y_discrete(
name = "Coefficients",
labels = labels) +
ggplot2::xlab("Estimate")
p
devtools::document()
devtools::load_all()
educate::coef_plot(lm.1, intercept = TRUE)
educate::coef_plot(lm.1)
devtools::document()
devtools::load_all()
educate::coef_plot(lm.1)
educate::coef_plot(lm.1, intercept = TRUE)
devtools::document()
devtools::load_all()
lm.2 = lm(gpa ~ 1 + homework + par_ed, data = keith)
head(keith)
lm.2 = lm(gpa ~ 1 + homework + parent_ed, data = keith)
educate::coef_plot(lm.2)
